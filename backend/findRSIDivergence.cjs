const myData = require('../src/assets/data.json');
const RSI = require('technicalindicators').RSI;
function findRSIDivergence(data) {
  const rsiPeriod = 14;
  const inputRSI = {
    values: data.map(item => +item[4]),
    period: rsiPeriod
  };
  const rsi = new RSI(inputRSI);
  const rsiValues = rsi.getResult();
  const bearishDivergencePoints = [];
  const bullishDivergencePoints = [];

  // Find highest and lowest prices
  const highPrices = [];
  const lowPrices = [];
  for (let i = 0; i < data.length; i++) {
    highPrices.push(+data[i][2]);
    lowPrices.push(+data[i][3]);
  }

  for (let i = 1; i < data.length - 1; i++) {
    const currentPrice = +data[i][4];
    const currentRsi = rsiValues[i];

    const previousPrices = data.slice(0, i).map(item => +item[4]);
    const previousRSIs = rsiValues.slice(0, i);

    const previousHighPrice = Math.max(...previousPrices);
    const previousLowPrice = Math.min(...previousPrices);
    const previousHighRSI = Math.max(...previousRSIs);
    const previousLowRSI = Math.min(...previousRSIs);
    const recentHighPrice = Math.max(...highPrices.slice(0, i));
    const recentLowPrice = Math.min(...lowPrices.slice(0, i));

    if (currentPrice > recentHighPrice && currentRsi < previousHighRSI) {
      let j = i - 1;
      while (j >= 0 && (+data[j][4] > recentHighPrice || rsiValues[j] > previousHighRSI)) {
        j--;
      }

      if (i - j > 3) {
        bearishDivergencePoints.push({ index: i, type: 'bearish' });
      }
    }

    if (currentPrice < recentLowPrice && currentRsi > previousLowRSI) {
      let j = i - 1;
      while (j >= 0 && (+data[j][4] < recentLowPrice || rsiValues[j] < previousLowRSI)) {
        j--;
      }

      if (i - j > 3) {
        bullishDivergencePoints.push({ index: i, type: 'bullish' });
      }
    }
  }

  return { bearish: bearishDivergencePoints, bullish: bullishDivergencePoints };
}

const testdata = [
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  // Add more test data here ...
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
  ["1597026383085", "3.731", "3.799", "3.494", "3.72", "24912403", "67632347.24399722", "37632347.24399722", "1"],
  ["1597026383085", "3.721", "3.743", "3.677", "3.708", "8422410", "22698348.04828491", "12698348.04828491", "0"],
];

const points = findRSIDivergence(myData)
console.log(points, 'testdata');